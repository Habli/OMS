# HG changeset patch
# User David Roe <roed.math@gmail.com>
# Date 1334787052 25200
# Node ID b2a578ebfce7bf7215b58bc52686d599172c2f0c
# Parent  7d8ac0ee679de0e5eeba4966fe280f5f65295472
[mq]: modlist.tmp

diff --git a/module_list.py b/module_list.py
--- a/module_list.py
+++ b/module_list.py
@@ -1148,6 +1148,13 @@
               sources = ['sage/modular/modsym/p1list.pyx'],
               libraries = ['gmp']),
 
+    Extension('sage.modular.pollack_stevens.dist',
+              sources = ['sage/modular/pollack_stevens/dist.pyx'],
+              libraries = ['flint','gmp','zn_poly'],
+              extra_compile_args=['-std=c99', '-D_XPG6'],
+              include_dirs = [SAGE_INC + 'FLINT/'],
+              depends = flint_depends),
+
     ################################
     ## 
     ## sage.modules
diff --git a/sage/modular/all.py b/sage/modular/all.py
--- a/sage/modular/all.py
+++ b/sage/modular/all.py
@@ -30,6 +30,8 @@
 
 from overconvergent.all import *
 
+from pollack_stevens.all import *
+
 from local_comp.all import *
 
 from cusps_nf import NFCusp, NFCusps, NFCusps_clear_cache, Gamma0_NFCusps
diff --git a/sage/modular/overconvergent/all.py b/sage/modular/overconvergent/all.py
--- a/sage/modular/overconvergent/all.py
+++ b/sage/modular/overconvergent/all.py
@@ -1,3 +1,5 @@
 from weightspace import  WeightSpace_constructor as pAdicWeightSpace
 
 from genus0 import OverconvergentModularForms
+
+from pollack.all import *
diff --git a/sage/rings/padics/padic_capped_absolute_element.pyx b/sage/rings/padics/padic_capped_absolute_element.pyx
--- a/sage/rings/padics/padic_capped_absolute_element.pyx
+++ b/sage/rings/padics/padic_capped_absolute_element.pyx
@@ -1372,7 +1372,7 @@
         else:
             return self
 
-    def valuation(self):
+    def valuation(self, p=None):
         """
         Returns the valuation of ``self``, ie the largest power of `p`
         dividing ``self``.
@@ -1402,7 +1402,8 @@
         """
         # We override this, rather than using the valuation in
         # padic_generic_element, for speed reasons.
-        
+        if p is not None and p != self.prime_pow.prime:
+            raise ValueError("p must be the same as the prime")
         cdef Integer ans
         ans = PY_NEW(Integer)
         mpz_set_ui(ans.value, self.valuation_c())
diff --git a/sage/rings/padics/pow_computer.pxd b/sage/rings/padics/pow_computer.pxd
--- a/sage/rings/padics/pow_computer.pxd
+++ b/sage/rings/padics/pow_computer.pxd
@@ -20,4 +20,8 @@
 cdef class PowComputer_base(PowComputer_class):
     cdef mpz_t* small_powers
     cdef mpz_t top_power
-    cdef object __weakref__
\ No newline at end of file
+    cdef object __weakref__
+
+cdef class PowComputer_long(PowComputer_class):
+    cdef long* small_powers
+    cdef object __weakref__
diff --git a/sage/rings/padics/pow_computer.pyx b/sage/rings/padics/pow_computer.pyx
--- a/sage/rings/padics/pow_computer.pyx
+++ b/sage/rings/padics/pow_computer.pyx
@@ -503,7 +503,42 @@
             return &(self.top_power)
         mpz_pow_ui(self.temp_m, self.prime.value, n)
         return &(self.temp_m)
-        
+
+cdef class PowComputer_long(PowComputer_class):
+    def __cinit__(self, Integer prime, long cache_limit, long prec_cap, long ram_prec_cap, bint in_field, poly=None, shift_seed=None):
+        self._initialized = 0
+        sig_on()
+        self.small_powers = <long*>sage_malloc(sizeof(mpz_t) * (cache_limit + 1))
+        sig_off()
+        if self.small_powers == NULL:
+            raise MemoryError("out of memory allocating power storing")
+        mpz_init(self.temp_m)
+
+        cdef Py_ssize_t i
+        self.small_powers[0] = 1
+        if cache_limit > 0:
+            self.small_powers[1] = mpz_get_si(prime.value)
+        for i from 2 <= i <= cache_limit:
+            self.small_powers[i] = self.small_powers[i-1] * self.small_powers[1]
+        (<PowComputer_class>self)._initialized = 1
+
+    def __dealloc__(self):
+        cdef Py_ssize_t i
+        if (<PowComputer_class>self)._initialized:
+            sage_free(self.small_powers)
+            mpz_clear(self.temp_m)
+
+    cdef mpz_t* pow_mpz_t_top(self):
+        mpz_set_si(self.temp_m, self.small_powers[self.prec_cap])
+        return &self.temp_m
+
+    cdef mpz_t* pow_mpz_t_tmp(self, long n):
+        if n <= self.cache_limit:
+            mpz_set_si(self.temp_m, self.small_powers[n])
+        else:
+            mpz_pow_ui(self.temp_m, self.prime.value, n)
+        return &(self.temp_m)
+
 pow_comp_cache = {}
 cdef PowComputer_base PowComputer_c(Integer m, Integer cache_limit, Integer prec_cap, in_field):
     """
diff --git a/setup.py b/setup.py
--- a/setup.py
+++ b/setup.py
@@ -740,7 +740,7 @@
             cplus = ''
 
         # call cython, abort if it failed
-        cmd = "python `which cython` %s --old-style-globals --disable-function-redefinition --embed-positions --directive cdivision=True,autotestdict=False,fast_getattr=True -I%s -o %s %s"%(cplus, os.getcwd(), outfile, f)
+        cmd = "python `which cython` %s --old-style-globals --disable-function-redefinition --embed-positions --directive cdivision=True,autotestdict=False,fast_getattr=True -I'%s/sage/sage/ext/' -I%s -o %s %s"%(cplus, SAGE_DEVEL, os.getcwd(), outfile, f)
         r = run_command(cmd)
         if r:
             return r
@@ -954,7 +954,10 @@
                      'sage.modular.modsym',
                      'sage.modular.quatalg',
                      'sage.modular.ssmod',
+                     'sage.modular.btquotients',
+                     'sage.modular.pollack_stevens',
                      'sage.modular.overconvergent',
+                     'sage.modular.overconvergent.pollack',
                      'sage.modular.local_comp',
                      
                      'sage.monoids',
